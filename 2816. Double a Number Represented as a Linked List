

My dumb Solution:
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        cur=head
        num=[]
        while cur:
            num.append(cur.val)
            cur=cur.next
        numm=int(''.join(map(str,num)))*2
        print(numm)
        dummy=ListNode()
        cur=dummy
        for i in str(numm):
            cur.next=ListNode(i)
            cur=cur.next
        return dummy.next


Learned Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        cur =head
        num=0
        while cur:
            num=num*10+cur.val
            cur=cur.next
        dnum=num*2
        dummy=ListNode(0)
        cur=dummy
        if dnum==0:
            return ListNode(0)
        while dnum>0:
            ld=dnum%10
            cur.next=ListNode(ld)
            dnum=dnum//10
            cur=cur.next

        prev=None
        cur=dummy.next
        while cur:
            nextnode=cur.next
            cur.next=prev
            prev=cur
            cur=nextnode
        return prev

        
